#!/usr/bin/perl
#################################################
# OLLM - OSG LaTeX Lecture Maker
# 
# An extension for latexmk to support 
# osgbeamer.cls
#
# REMARK:
# This is my first piece of Perl code I've
# ever written. 
# Thus, probably, it shows bad style and it is 
# quite unelegant.
# However, it seems to work.
#################################################
my $ollm_version='0.9.3';
my $progname = 'ollm';
use strict;
use 5.30.0;
use warnings;
use File::Basename;

# Determine way of calling,         
# restart if needed
if (basename($0) eq $progname) {
  # not called as rc file, restart
  my @execarray = ("latexmk","-norc","-r",$0,@ARGV);
  exec @execarray;
}
# Now the script is called as a rc of latexmk
#####################################
# MAIN                              #
#####################################
package ollm;
use 5.30.0;
use feature 'signatures','lexical_subs','switch';
#no warnings 'experimental::signatures','experimental::smartmatch';
use strict;
use warnings;
use File::Basename;
use File::Copy;
use Data::Dumper qw(Dumper);   # For debugging only
use Getopt::Long qw(GetOptions);
use Pod::Usage;
use Cwd qw(cwd getcwd);
use List::MoreUtils qw(firstidx);
use Term::ANSIColor;

no warnings 'experimental::signatures';
#####################################
# Config-Variablen und Defaults     #
#####################################
{
  # For semantics, see latexmk manual
  no warnings 'once';
  @main::default_files=("./main.tex");
  $main::pdf_mode=4;
  $main::lualatex = 'lualatex --synctex=1 %O %P';
  $main::pre_tex_code = '';
  $main::silent = 1;
  $main::jobname = $main::jobname;
  $main::recorder=1;
  $main::cleanup_mode=3; # aux files won't be deleted
  $main::clean_ext="bbl ext nav snm vrb lbr fls log fdb_latexmk";
  $main::compiling_cmd="tput setaf 4; echo \"Start TeXing %B...\";  tput init";
  $main::aux_dir="";
  $main::emulate_aux=0;
}

my $doctype="slides";
my $lang='';
my $lectconfig='lectdates';
my $lectureprefix="lecture";
my $defaultlanguage='de';
my $osgbeamer_dir = '';
my $do_publish = 0;
my $first_chapter_number = undef;
my @first_chapter_number = undef;
my $shared_source_dir ='../Include';
my $shared_data_dir='../Ref';
my $standalone=0;
my $config_file = '../config.pl';
my %deploy_path;
my %deploy_file;
$deploy_file{all} = '${prefix}-${num}-${doctype}-${lang}-${topic}';

greeting();

Getopt::Long::Configure("pass_through"); # alle unbekannten Optionen werden durchgereicht
Getopt::Long::Configure("prefix=+");     # ollm-Optionen starten mit '+'
foreach ( @ARGV ) {
  if ($_ eq '--help') {
    &main::print_help;
    say colored("\nFor help on ollm call:",'bold')," 'ollm help|+h'";
    exit;
  }
  if ($_ eq '--') {last;}
  # Optionen die durch OLLM genutzt werden.
  # Alle anderen werden an latexmk weitergeleitet.
  $_ = '+'.$_ if $_ =~ /^(slides|beamer|presentation|script|article|handout|standalone|publish|debug|verbose|lang|classpath)/;
}
# Zunächst werden die Optionen ausgewertet, die für den 'standalone'-Modus relevant sind.
GetOptions(
	   'standalone' => \$standalone,
	   'classpath=s' => \$osgbeamer_dir,
	   'verbose|debug' => sub { $main::silent=0; },
	   'h|help|?' => \&ollm_print_help
	  );
if ($standalone) {
  # Bei 'standalone' wird zurück nach latexmk gesprungen und 'normal' weitergemacht
  if ($osgbeamer_dir ne '') {
    tex_path($osgbeamer_dir);
  }
  return 1; 
}

# Ab hier wird Ollm-Verarbeitung angenommen
# Erstens: Verzeichnisstruktur überprüfen
if (!is_ollmtree()) {
  print colored("Error: No proper directory structure. Try option \'standalone\'.\n",'red');
  exit(-1); # exit() kehrt vollständig zurück, nicht über latexmk
}

# Ollm-Optionen
GetOptions(
	   # 
	   'ollmconfig=s' => \$config_file,
	   'lang=s' => \$lang,
	   # Es sind gleichwertig 'slides', 'beamer' und 'presentation'
	   # als Option möglich, intern wird beides auf den Dokumententyp
	   # 'slides' abgebildet.
	   'slides|beamer|presentation' => sub {
	     $doctype='slides';
	     if (is_beamer_dir() == 0) {
	       say "Error: Directory is not intended for beamer document!\n";
	       exit(-1);
	     }
	   },
	   # Es sind gleichwertig 'script' und 'article' als Option möglich,
	   # intern wird beides auf den Dokumententyp 'script' abgebildet.
	   'script|article' => sub {
	     if (is_article_dir() == 0) {
	       say "Error: Directory is not intended for article document!\n";
	       exit(-1);
	     }
	     $doctype='script';
	   },
	   'handout' => sub {
	     $doctype='handout';
	     if (is_beamer_dir() == 0) {
	       say "Error: Directory is not intended for beamer document!\n";
	       exit(-1);
	     }
	   },
	   'publish' => \$do_publish,
	  );

## Lesen und Verarbeiten der Konfigurationsdatei
unless ( -e  $config_file) {
  die"Error: Can't find config file '".$config_file."'\n";
}

# Mache @ARGV lokal und speichere $config_file als erstes Element von @ARGV.
# Der leere Diamandoperator <> öffnet automatisch eine Datei entsprechend des
# ersten elements von @ARGV.
my $confcode = do{local(@ARGV,$/)=$config_file;<>};
# Werte den Inhalt der Konfigurationsdateiaus.
eval $confcode;
print color('reset');
if ($@) {
  print color('red');
  say "Can't parse \'$config_file\': ",$@;
  print color('reset');
  exit(-1);
}
if ($osgbeamer_dir ne '') {
  tex_path($osgbeamer_dir);
}
tex_path($shared_source_dir);

# Ollm hat zwei Hauptfunktionalitäten:
#  1. Bereite latexmk für die Dokumenterzeugung in einer Vorlesungsverzeichnisstruktur vor
#  2. Veröffentliche (kopieren/umbenennen) erzeugte Dokumente
#
# TODO: Ggf. kommen künftig weitere Funktionen hinzu
if ($do_publish) {
  publish();
} else {
  say "Make document";
  make_document();
}
return 1;

##
## Ende der Verarbeitung auf dem Top-Level
##
sub make_document {
  my $number;
  my $current_first_chapter;
  my $topic;
  #my $current_first_chapter;
  if ($lang eq '') {
    $lang = $defaultlanguage;
  }
  # Ermittle die Nummer des aktuellen Verzeichnisses (beginnend mit 0)
  ($number,$topic) = lect_descr($doctype);
  ($number,$current_first_chapter) = curr_number($number);
  # Wir brauchen TeX-Code der *vor* dem eigentlichen Dokument ausgeführt wird
  # '\DocumentMetadata' wird für PDF-Tagging benötigt
  if ($lang eq "en") {
    $main::pre_tex_code='\DocumentMetadata{pdfversion=1.7,lang=en-US, uncompress}';
  } else { # $lang should be 'de'
    $main::pre_tex_code='\DocumentMetadata{pdfversion=1.7,lang=de-DE, uncompress}';
  }
  # Informiere die osgbeamer-Klasse über
  $main::pre_tex_code=$main::pre_tex_code.
    '\gdef\ollm{\gdef\OsgShareDataPath{'.$shared_data_dir.'}'. # Pfad zu (vorlesungs-)gemeinsamen Daten
    '\gdef\OsgLectConfig{'.$lectconfig.'}'.                    # Namen der globalen Vorlesungskonfigurationsdatei
    '\gdef\OsgCurrentDir{../'.basename(getcwd()).'}'.          # das eigene Verzeichnis (deprecated)
    '\gdef\OsgFirstChapter{'.$current_first_chapter.'}'.       # die Kapitelnummer für das erste Verzeichnis
    '}';
  # Sammle 
  $main::aux_dir=$shared_data_dir;
  $main::emulate_aux=1;
  # Die verbleibenden Informationen sind im Jobnamen codiert:
  #  <lectureprefix>-<number>-<doctype>-<language>-<topic>
  $main::jobname = $lectureprefix.'-'.$number.'-'.$doctype.'-'.$lang.'-'.$topic;
}
 
sub publish(){
  # Variablennamen, wie sie in der Konfigurationsdatei genutzt werden
  my $num;
  my $topic;
  my $prefix=$lectureprefix;;
  # Sprache(n) als Array für den Fall, dass beide Sprachversionen gleichzeitig veröffentlicht werden sollen.
  my @langs;
  # Da article/script und slides/beamer/presentation jeweils synonym genutzt werden können, werden die
  # 
  if (exists($deploy_path{'article'})) { $deploy_path{'script'} = $deploy_path{'article'}};
  if (exists($deploy_path{'beamer'})) { $deploy_path{'slides'} = $deploy_path{'beamer'}};
  if (exists($deploy_path{'presentation'})) { $deploy_path{'slides'} = $deploy_path{'presentation'}};
  if (!exists($deploy_path{$doctype}) and !exists($deploy_path{'all'})) {
    die "No path for publishing given for document type $doctype.";
  }
  if (!exists($deploy_path{$doctype})) { $deploy_path{$doctype} =  $deploy_path{'all'}; } 

  if (exists($deploy_file{'article'})) { $deploy_file{'script'} = $deploy_file{'article'}};
  if (exists($deploy_file{'beamer'})) { $deploy_file{'slides'} = $deploy_file{'beamer'}};
  if (exists($deploy_file{'presentation'})) { $deploy_file{'slides'} = $deploy_file{'presentation'}};
  if (!exists($deploy_file{$doctype}) and !exists($deploy_file{'all'})) {
    # Should never happen since a $deploy_file{'all'} is set be default
    die "No path for publishing given for document type $doctype.";
  }
  if (!exists($deploy_file{$doctype})) { $deploy_file{$doctype} =  $deploy_file{'all'}; } 

  if ($lang eq '') {
    $lang = $defaultlanguage;
  }
  ($num, $topic) = lect_descr($doctype);
  ($num,$_) = curr_number($num);
  if ($lang eq 'all') {
    @langs = ('de','en');
  } else {
    @langs = $lang;
  }
  # Für den Fall dass es mehr als ein Pfad gibt, nutzen wir ein Array von Pfaden
  my $patharrayref = $deploy_path{$doctype};
  # Single elements are converted to an array reference
  $patharrayref = [ $patharrayref ] if ref $patharrayref eq '';
  for my $l (@langs) {
    my $source_pdffile_name = $lectureprefix.'-'.$num.'-'.$doctype.'-'.$l.'-'.$topic.'.pdf';
    if (-e "$source_pdffile_name") {
      for my $p  (@{ $patharrayref}) {
	my $lang = $l;
	my $deploy_file_name;
	my $evalstr;
	$evalstr = "\$deploy_file_name= \"$deploy_file{$doctype}.pdf\"";
	eval $evalstr;
	say "Copy \'$source_pdffile_name\' to \'$p$deploy_file_name\'";
	copy($source_pdffile_name,$p.$deploy_file_name);
      }
    } else {
      say "Can't find file '$source_pdffile_name', skipping.";
      say "  Did you run 'ollm $doctype'?";
    }
  }
  exit(0)
}

#####################################
# Hilfsfunktionen
#####################################

sub is_beamer_dir {
  # Gibt true (1) zurück, aktuelles Verzeichnis für slides/beamer
  # vorgesehen ist, sonst false (0)
  my $dir = basename(getcwd());
  if ($dir =~ /^[0-9][0-9][0-9][b]?-.*/) {
    1;
  } else {
    0;
  }
}

sub is_article_dir {
  # Gibt true (1) zurück, aktuelles Verzeichnis für article/script
  # vorgesehen ist, sonst false (0)
  my $dir = basename(getcwd());
  if ($dir =~ /^[0-9][0-9][0-9][a]?-.*/) {
    1;
  } else {
    0;
  }
}

sub is_ollmtree {
  # Gibt true (1) zurück, aktuelles Verzeichnis für ollm
  # vorgesehen ist, sonst false (0)
  if (( is_beamer_dir() == 1 ) or ( is_article_dir() == 1 )) {
    1;
  } else {
    0;
  }
}

sub doc_dirs ($type) {
  # doc_dirs(type)
  #
  # type: string (slides|script|article|lang)
  #
  # Gibt eine geordnete Liste mit allen OLLM-Verzeichnisse des angegebenen Typs, die im gleichen
  # Elternverzeichnis stehen wie das aktuelle Verzeichnis
  if (!is_ollmtree()) {
    my @empty = ();
    return @empty;
  }
  my @dirs=glob ('../[0-9][0-9][0-9]-*');           # gemeinsame Verzeichnisse
  if (($type eq 'slides') or ($type eq 'handout')){ # typenspezifische Verzeichnisse
    @dirs= (@dirs,glob ( '../[0-9][0-9][0-9]b-*'));
  } elsif (($type eq 'script') or ($type eq 'article')) {
    @dirs= (@dirs,glob ( '../[0-9][0-9][0-9]a-*'));
  }
  foreach my $d ( @dirs ) {	# Prefixpfad wird abgeschnitten
    $d = basename($d);
  }
  @dirs = sort @dirs;
  @dirs;
}

sub greeting {
  print colored("OLLM - OSG LaTeX Lecture Maker $ollm_version: an extension for latexmk to support osgbeamer.cls\n\n", "bold");
}

sub ollm_print_help {
  print 
    "Usage: \n",
    " ", colored("Generate documents:\n","faint"),
    "  latexmk [<ollm options>] [<doctype>] [<latexmk options>] [<file>]\n",
    "  <doctype>: 'slides'|'beamer'|'handout'|'script'|'article' (default: 'slides')\n\n",
    "  <ollm options> (prefix '+' may be skipped)\n",
    "   +standalone: disable most features of OLLM\n",
    "   +debug|verbose: additional information\n",
    "   +lang=[de|en]: select language\n",
    "   +ollmconfig=<file>: reads configuration from <file> (default: '../config.pl')\n\n",
    "  <file> LaTeX file (default: 'main.tex'), *must* use osgbeamer class.\n\n",
    " ",colored("Deploy documents:\n","faint"),
    "  latexmk [lang=de|en|all] +publish <doctype>\n",
    "  <latexmk options>: see 'latexmk --help'\n"
    ;
  exit;
}

sub lect_descr($type) {
  # lect_descr(type)
  #
  # type: string (slides|script|article)
  #
  # Gibt die Index (Position in der Reihenfolge der Verzeichnisse) und die
  # Themenbeschreibung des aktuellen Verzeichnisses zurück.
  # Dabei ist der erste Index 0-
  if (!is_ollmtree()) {
    my $empty = undef;
    return $empty;
  } 
  my $topic_dir = basename(getcwd());
  my @all_dirs = doc_dirs($type);
  my $index = firstidx { /$topic_dir/ } @all_dirs;
  my ( $topic ) = $topic_dir=~ /[0-9][0-9][0-9][ab]?\-(.*)\s*$/;
  return ( $index,  $topic);
}

sub curr_number($n) {
  # curr_number(number)
  #
  # number: uncorrected number
  #
  # Gibt die angepasste Kapitelnummer für den gegebenen Dokumententyp zurück
  my $number;
  my $current_first_chapter;
  # Für die Kapitelnummer des ersten Verzeichnisses gibt es entweder einen Skalar
  # (ist gleich für Präsentation und Skript) oder ein Array ([0]: Präsentation, [1]: Skript)
  if (defined($first_chapter_number)) {
    $current_first_chapter = $first_chapter_number;
  } elsif (defined($first_chapter_number[0])) {
    if ($doctype eq 'script') {
      $current_first_chapter =  $first_chapter_number[1];
    } else { # Präsentation oder Handout
      $current_first_chapter =  $first_chapter_number[0];
    }
  } else {
    # default: wir beginnen mit 1
    $current_first_chapter =  1;
  }
  $number = $n + $current_first_chapter;	    
  $number=sprintf("%02d", $number);
  return ($number,$current_first_chapter);
}

sub tex_path($path){
  # Füge $path zum TeX-Suchpfad hinzu
  main::ensure_path( 'TEXINPUTS',$path);
}

# #$pdflatex="pdflatex -shell-escape -file-line-error -synctex=1 %O %P";


#####################################
# Dependencies                      #
#####################################
package main;
add_cus_dep('eps','pdf',0,'eps2pdf');
sub eps2pdf{
  system("epspdf \"$_[0].eps\"" );
}
add_cus_dep('jpg','pdf',0,'jpg2pdf');
sub jpg2pdf{
  system("convert \"$_[0].jpg\" \"$_[0].pdf\"" );
}

add_cus_dep('jpeg','pdf',0,'jpeg2pdf');
sub jpeg2pdf{
  system("convert \"$_[0].jpeg\" \"$_[0].pdf\"" );
}

add_cus_dep('gif','pdf',0,'gif2pdf');
sub gif2pdf{
  system("convert \"$_[0].gif\" \"$_[0].pdf\"" );
}
sub rail{
  system("rail \"$_[0]\"" );
}
# Einkommentieren, um den Index zu bauen (Rekursion nicht vergessen)
#$makeindex='texindy -M lang/german/duden-utf8 -M base/ff-ranges -M base/latin-lettergroups -M ../Include/localidx';

# add_input_ext('rao');
# add_input_ext('rai');
add_cus_dep('rai','rao',0,'rail');

